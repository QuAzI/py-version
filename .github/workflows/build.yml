name: build

on:
  push:
    branches:
      - master
      - main
      - 'release/**'
  workflow_dispatch:

jobs:
  # tests:
  #   name: Tests
  #   runs-on: ubuntu-latest
  #   steps:
  #     - uses: actions/checkout@v1
  #     - uses: ./.github/workflows/tests
  prepare:
    name: Prepare
    # needs: [tests]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v1
      - name: Set up Python 3.8
        uses: actions/setup-python@v1
        with:
          python-version: 3.8
      - name: Generate release description
        id: description
        env:
          BRANCH: ${{ github.ref_name }}
        run: |
          MAIN_BRANCH="master"
          VERSION=`python version.py --get-head`.${{ github.run_number }}
          if [ -n "$(git config init.defaultBranch)" ]; then MAIN_BRANCH="$(git config init.defaultBranch)"; fi
          if [[ "$BRANCH" == "$MAIN_BRANCH" || "$BRANCH" == release/* ]]; then IS_PRE='false'; else IS_PRE='true'; fi
          if [ "$IS_PRE" = "false" ]; then POSTFIX=''; else POSTFIX="${{ github.ref_name }}"; fi
          echo "::set-output name=prerelease::${IS_PRE}"
          echo "::set-output name=release_postfix::${POSTFIX}"
          sha8="$(echo ${GITHUB_SHA} | cut -c1-8)"
          echo "::set-output name=sha8::$sha8"
          prev_tag=$(git for-each-ref refs/tags --sort=-committerdate --format='%(refname:short)' --count=1)
          echo "::set-output name=prev_tag::${prev_tag}"
          if [ "${prev_tag}" = "" ]; then CHANGELOG=''; else CHANGELOG=$(git shortlog --no-merges HEAD --not ${prev_tag}); fi
          CHANGELOG="${CHANGELOG//'%'/'%25'}"
          CHANGELOG="${CHANGELOG//$'\n'/'%0A'}"
          CHANGELOG="${CHANGELOG//$'\r'/'%0D'}"
          CHANGELOG="${CHANGELOG//$'      '/' - '}"
          echo "::set-output name=change_log::${CHANGELOG}"
          echo "::set-output name=version::${VERSION}"
          TAG=$(git tag --points-at HEAD)
          NEW_TAG=v${VERSION}-$sha8
          if [ "$IS_PRE" = "true" ]; then NEW_TAG="$NEW_TAG-dev"; fi
          if [ -z "$TAG" ]; then TAG=$NEW_TAG; fi
          echo "::set-output name=tag::${TAG}"
    outputs:
      prerelease: ${{ steps.description.outputs.prerelease }}
      release_postfix: ${{ steps.description.outputs.release_postfix }}
      sha8: ${{ steps.description.outputs.sha8 }}
      change_log: ${{ steps.description.outputs.change_log }}
      version: ${{ steps.description.outputs.version }}
      tag: ${{ steps.description.outputs.tag }}
  build:
    runs-on: windows-latest
    needs: [prepare]
    steps:
    - uses: actions/checkout@v1
    - name: Set up Python 3.8
      uses: actions/setup-python@v1
      with:
        python-version: 3.8
        architecture: 'x86'
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pyinstaller
    - name: build with pyinstaller
      run: |
        (Get-Content -path version.py -Raw) -replace 'v{version_head}.0-dev','${{ needs.prepare.outputs.tag }}' > version.py.tmp
        del .\version.py
        move .\version.py.tmp .\version.py
        python version.py > version.rc
        pyinstaller --onefile ./application.py --version-file=version.rc
    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ needs.prepare.outputs.tag }}
        release_name: Release ${{ needs.prepare.outputs.tag }} ${{ needs.prepare.outputs.release_postfix }}
        draft: false
        prerelease: ${{ needs.prepare.outputs.prerelease }}
        body: |
          ${{ needs.prepare.outputs.change_log }}
    - name: Upload Release Asset
      id: upload-release-asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./dist/application.exe
        asset_name: application.exe
        asset_content_type: application/octet-stream
